// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Daffa Zaky",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/bantuan": {
            "get": {
                "description": "This endpoint intended to show all the 'bantuan' data that is sent from the user. Only admin can access this endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bantuan"
                ],
                "summary": "Show all 'bantuan' data sent from the user.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Model.Bantuan"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Use this endpoint with POST method if you want to create a new bantuan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bantuan"
                ],
                "summary": "For creating a new bantuan.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Bantuan"
                        }
                    }
                }
            }
        },
        "/api/blogs": {
            "get": {
                "description": "This endpoint intended to show all the blogs data that is sent from the user. Only registered user can see what other already post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blogs"
                ],
                "summary": "Show all blogs data sent from the user.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Model.Blog"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Use this endpoint with POST method if you want to create a new blog.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blog"
                ],
                "summary": "For creating a new blog.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Blog"
                        }
                    }
                }
            }
        },
        "/api/blogs/{id}": {
            "get": {
                "description": "This endpoint intended to show blog data that is sent from the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blogs"
                ],
                "summary": "Show blog data by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Blog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Blog"
                        }
                    }
                }
            },
            "put": {
                "description": "Use this endpoint with PUT method if you want to update a  blog.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blog"
                ],
                "summary": "For updating a blog.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Blog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Blog"
                        }
                    }
                }
            },
            "delete": {
                "description": "Use this endpoint with DELETE method if you want to delete a  blog.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blog"
                ],
                "summary": "For deleting a blog.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Blog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Blog"
                        }
                    }
                }
            }
        },
        "/api/blogs/{slug}": {
            "get": {
                "description": "This endpoint intended to show blog data that is sent from the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blogs"
                ],
                "summary": "Show blog data by slug.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blog slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Blog"
                        }
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "description": "This endpoint intended to show all categories data .",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Show all categories data.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Model.Blog"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Use this endpoint with POST method if you want to create a new category Only admin can post category.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "For creating a new category.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Category"
                        }
                    }
                }
            }
        },
        "/api/comment": {
            "post": {
                "description": "Use this endpoint with POST method if you want to create a new comment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blog"
                ],
                "summary": "For creating a new blog's comment.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Comment"
                        }
                    }
                }
            }
        },
        "/api/comment/{id}": {
            "get": {
                "description": "This endpoint intended to show comments of some blogs data that is sent from the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "Show comment of blogs data by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Comment"
                        }
                    }
                }
            },
            "delete": {
                "description": "Use this endpoint with DELETE method if you want to delte a  comment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "For deleting a blog.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Comment"
                        }
                    }
                }
            }
        },
        "/api/favorit": {
            "post": {
                "description": "Use this endpoint with POST method if you want to create a new favorit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blog"
                ],
                "summary": "For creating a new favorit.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Favorit"
                        }
                    }
                }
            }
        },
        "/api/favorit/user_id/{id}": {
            "get": {
                "description": "This endpoint intended to show what user favorite's blog",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favorit"
                ],
                "summary": "Show blogs favorit data by User ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Favorit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Model.Favorit"
                            }
                        }
                    }
                }
            }
        },
        "/api/favorit/{id}": {
            "delete": {
                "description": "Use this endpoint with DELETE method if you want to delete a favorit.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favorit"
                ],
                "summary": "For deleting a favorit.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Favorit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.Favorit"
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "description": "Use this endpoint with POST method if you want to create a new user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blog"
                ],
                "summary": "For creating a new user (register).",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.User"
                        }
                    }
                }
            }
        },
        "/api/usermeta": {
            "get": {
                "description": "This endpoint intended to show usermeta from users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usermeta"
                ],
                "summary": "Show usermeta data .",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserMetaID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.UserMeta"
                        }
                    }
                }
            },
            "post": {
                "description": "Use this endpoint with POST method if you want to create a new user meta.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usermeta"
                ],
                "summary": "For creating a new user meta data.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.UserMeta"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "description": "This endpoint intended to show all the registered users that is sent from the user. Only admin can see this",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blogs"
                ],
                "summary": "Show all users, of course only user with admin role can see this",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Model.User"
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "description": "This endpoint intended to show user data that is sent from the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Show user data by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.User"
                        }
                    }
                }
            },
            "put": {
                "description": "Use this endpoint with PUT method if you want to update a user data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "For updating a user.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.User"
                        }
                    }
                }
            },
            "delete": {
                "description": "Use this endpoint with DELETE method if you want to delete a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "For deleting a user.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Model.User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Model.Bantuan": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/Model.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "Model.Blog": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "photo_blog": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "Model.Category": {
            "type": "object",
            "properties": {
                "category_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "Model.Comment": {
            "type": "object",
            "properties": {
                "blog_id": {
                    "type": "integer"
                },
                "commenter": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "Model.Favorit": {
            "type": "object",
            "properties": {
                "blog_id": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "Model.User": {
            "type": "object",
            "properties": {
                "blogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Model.Blog"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "fullname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "photo_profile": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "Model.UserMeta": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "photo_banner": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{"http"},
	Title:       "Final Project | Blog API with Gin, Gorm and Gosimple/Slug",
	Description: "This Project is still production ready and still receive support from developer. For admin account (username : daffaz, password : admin), writer account (username : william, password: shakespear)",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
